Advanced Programming, Fall 2014
HW3 - Heaps (Priority Queues), Data Streams, Simple Dijkstra.
Due electronically on Blackboard on Tuesday Oct 14, 11:59pm.

Include in your submission a report.txt and all python programs.

Expected Amount of Work for an average student: 8-10 hours.

Textbooks for References:
[1] CLRS Ch. 6 (heapsort).

1. (taken from my first paper: see "Algorithm 1" in Huang and Chiang (2005).)

   Given two lists A and B, each with n integers, return
   a sorted list C that contains the smallest n elements from AxB:

     AxB = { (x, y) | x in A, y in B }

   i.e., AxB is the Cartesian Product of A and B.

   ordering:  (x,y) < (x',y') iff. x+y < x'+y' or (x+y==x'+y' and y<y')

   You need to implement three algorithms and compare:

   (a) enumerate all n^2 pairs, sort, and take top n.
   (b) enumerate all n^2 pairs, but use qselect from hw1.
   (c) Dijkstra-style best-first, only enumerate O(n) (at most 2n) pairs.

   What are the complexities of these algorithms? 
   Randomly generate two lists of n=5000 and report the running time of each.
   
   For timing you can do:

      import time
      t = time.time()
      # ... do some computation ... 
      print time.time() - t   # time elapsed, in seconds 

   I/O:

   >>> a, b = [4, 1, 5, 3], [2, 6, 3, 4]
   >>> nbesta(a, b)   # algorithm (a), slowest
   [(1, 2), (1, 3), (3, 2), (1, 4)]
   >>> nbestb(a, b)   # algorithm (b), slow
   [(1, 2), (1, 3), (3, 2), (1, 4)]
   >>> nbestc(a, b)   # algorithm (c), fast
   [(1, 2), (1, 3), (3, 2), (1, 4)]

   Hint on (c): you can use Python's heapq module for priority queue.

   Filename: nbest.py


2. k-way mergesort (the classical mergesort is a special case where k=2).

   >>> kmergesort([4,1,5,2,6,3,7,0], 3) 
   [0,1,2,3,4,5,6,7]

   What is the complexity? Write down the detailed analysis.

   Filename: kmergesort.py

3. Find the k smallest numbers in a data stream of length n (k<<n),
   using only O(k) space (the stream itself is too big to fit in memory).

   Input: we read from standard input. The first line has the number k, 
   	  and the next n lines are the stream, each line with one number 
	  (end by end of file; i.e., the number "n" is not explicitly specified), e.g.:
	  
	  4
	  10
	  2
	  9
	  3
	  7
	  8
	  11
	  5
	  7

	  you can read this way:

	  for line in sys.stdin:
              ...

   Output: print to the standard output (just normal "print") the k numbers on one line,
   	   separated by white spaces. The k numbers should be sorted from min to max.
	   For the above example, you should print:

	   2 3 5 7

   What is your complexity? Write down the detailed analysis.
   
   Filename: datastream.py



Debriefing (required!): --------------------------

0. What's your name?
1. Approximately how many hours did you spend on this assignment?
2. Would you rate it as easy, moderate, or difficult?
3. Did you work on it mostly alone, or mostly with other people?
4. How deeply do you feel you understand the material it covers (0%â€“100%)? 
5. Any other comments?

This section is intended to help us calibrate the homework assignments. 
Your answers to this section will *not* affect your grade; however, skipping it
will certainly do.

